<?php
/**
 * @file
 * Code for the entity relationship graph.
 */
/**
 * Implements hook_menu().
 */
function entitiesdiagram_menu() {
  $items['admin/entities-diagram'] = array(
    'title' => 'Entity relations',
    'page callback' => 'entitiesdiagram_menu_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('administer content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Main function to create full graph of entities.
 *
 * @param
 *  $entity_type - Pass on and anetity type to render only.
 */
function entitiesdiagram_menu_callback($entity_type = FALSE, $include_fields = '') {
  drupal_add_css(drupal_get_path('module', 'entitiesdiagram') . '/entitiesdiagram.css');
  drupal_add_js('http://mdaines.github.io/viz.js/bower_components/viz.js/viz.js', 'file');

  $data = 'var dataSVG = `' . entitiesdiagram_entitygraph_generate(entitiesdiagram_entitygraph(empty($include_fields), $entity_type)) . '`;';
  drupal_add_js($data, 'inline');

  drupal_add_js(drupal_get_path('module', 'entitiesdiagram') . '/entitiesdiagram.js', 'file');
  return '';
}

/**
 * Main function to create full graph of entities.
 */
function entitiesdiagram_entitygraph($include_fields = FALSE, $single_entity_type = FALSE) {
  $graph = array();
  $entity_refs = array();
  entitiesdiagram_entitygraph_entityreference_connections($entity_refs);
  entitiesdiagram_entitygraph_core_reference_connections($entity_refs);
  if ($single_entity_type) {
    $entities = array($single_entity_type => entity_get_info($single_entity_type));
  }
  else {
    $entities = entity_get_info();
  }

  foreach ($entities as $entity_type => $entity_info) {
    // Exclude non important entities.
    if (in_array($entity_type, array('message_type', 'restful_token_auth',))) {
      continue;
    }
    $node_info = array();
    $node_info['title'] = $entity_info['label'];

    if (!empty($entity_info['base table'])) {
      $table_schema = drupal_get_schema($entity_info['base table']);
      $table_schema += array('fields' => array(), 'foreign keys' => array());

      if ($include_fields) {
        foreach ($table_schema['fields'] as $field_name => $field_info) {
          $node_info['properties'][$field_name] = array(
            'type' => $field_info['type'],
          );
        }
      }


      // Generate the bundles.
      $has_bundles = !empty($entity_info['entity keys']['bundle']) && count($entity_info['bundles']) > 0;
      if ($has_bundles) {
        foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
          $graph['nodes']['cluster_entity_group_' . $entity_type]['entity_' . $entity_type . '__bundle_' . str_replace('-', '_', $bundle_name)] = array(
            'title' => $bundle_info['label'],
          );
        }
      }

      // Traverse the instances.
      if ($include_fields) {

        $fields = array();
        foreach (field_info_instances($entity_type) as $bundle => $instances) {
          foreach ($instances as $field_name => $instance_info) {
            $fields[$field_name][] = $bundle;
          }
        }

        foreach ($fields as $field_name => $bundles) {
          $field_info = field_info_field($field_name);
          $field_property_info = array(
            'label' => $field_name,
            'type' => $field_info['type'],
          );
          if ($field_info['cardinality'] <> 1) {
            $field_property_info['type'] = 'list<' . $field_property_info['type'] . '>';
          }

          // Build the relationships.
          $relationships = array();
          foreach ($field_info['foreign keys'] as $foreign_key_name => $foreign_key_info) {
            if (count($foreign_key_info['columns']) != 1) {
              // We cannot process multiple key foreign keys.
              continue;
            }
            // Remote column.
            reset($foreign_key_info['columns']);
            // Local column.
            key($foreign_key_info['columns']);

            $foreign_entity_type = entitiesdiagram_entitygraph_get_entity_by_table($foreign_key_info['table']);
            if ($foreign_entity_type) {
              $relationships[] = $foreign_entity_type;
            }
          }

          foreach ($bundles as $bundle_name) {
            $graph['nodes']['cluster_entity_group_' . $entity_type]['entity_' . $entity_type . '__bundle_' . $bundle_name]['fields'][$field_name] = $field_property_info;
          }
        }
      }
    }

    if ($has_bundles) {
      $group = &$graph['nodes']['cluster_entity_group_' . $entity_type];
      $group['label'] = $entity_info['label'];
      $group['group'] = TRUE;
    }

    // Entity reference edges.
    if (isset($entity_refs[$entity_type])) {
      foreach ($entity_refs[$entity_type] as $bundle_name => $field_ref_info) {
        foreach ($field_ref_info as $field_name => $target) {
          foreach ($target as $target_type => $target_info) {
            $relationship = 'entity_' . $target_type . '__bundle_' . $target_info['bundle']; //
            entitiesdiagram_entitygraph_relationship($graph, 'entity_' . $entity_type . '__bundle_' . $bundle_name, $relationship, $target_info['required'], $target_info['cardinality'], $target_info['fieldname']);
          }
        }
      }
    }
  }

  return $graph;
}

/**
 * Get entity reference connections.
 */
function entitiesdiagram_entitygraph_entityreference_connections(&$field_relation) {
  // Get all entityreference field names
  $query = db_select('field_config', 'f');
  $query->fields('f', array('field_name'));
  $query->condition('f.type', 'entityreference');
  $query->distinct();
  $rows = $query->execute();

  // Create an associative array:
  // $ar[source_type][source_bundle][field_name][target_type][target_bundle]
  foreach ($rows as $row) {
    $field_name = $row->field_name;
    $field_info = field_info_field($row->field_name);
    foreach($field_info['bundles'] as $type => $bundles) {
      foreach($bundles as $bundle) {
        $target_bundles = !empty($field_info['settings']['handler_settings']['target_bundles']) ? $field_info['settings']['handler_settings']['target_bundles'] : array($field_info['settings']['target_type'] => $field_info['settings']['target_type']);
        foreach ($target_bundles as $target) {
          $instance_info = field_info_instance($type, $field_name, $bundle);
          $field_relation[$type][$bundle][$field_name][$field_info['settings']['target_type']] = array (
            'bundle' => $target,
            'cardinality' => $field_info['cardinality'],
            'required' => $instance_info['required'],
            'fieldname' => $field_name,
          );
        }
      }
    }
  }
}



/**
 * Get term and node reference connections.
 */
function entitiesdiagram_entitygraph_core_reference_connections(&$entity_refs) {
  // Get node and term refs.
  $field_types = array(
    'taxonomy_term' => 'taxonomy_term_reference',
    'node' => 'node_reference',
    'user' => 'user_reference',
  );
  foreach ($field_types as $source_type => $field_type) {
    $fields = field_read_fields(array('type' => $field_type));
    // Create an associative array:
    // $ar[source_type][source_bundle][field_name][target_type][target_bundle]
    foreach ($fields as $field_name => $taxonomy_field) {
      $field_info = field_info_field($field_name);
      foreach ($field_info['bundles'] as $type => $bundles) {
        foreach ($bundles as $bundle) {
          $targets = array();
          // Build list of target bundle.
          if ($source_type == 'taxonomy_term') {
            foreach ($field_info['settings']['allowed_values'] as $target) {
              $targets[] = $target['vocabulary'];
            }
          }
          elseif ($source_type == 'node') {
            foreach ($field_info['settings']['referenceable_types'] as $target) {
              if ($target) {
                $targets[] = $target;
              }
            }
          }
          elseif ($source_type == 'user') {
            $targets[] = 'user';
          }

          foreach ($targets as $target) {
            $instance_info = field_info_instance($type, $field_name, $bundle);
            $entity_refs[$type][$bundle][$field_name][$source_type] = array(
              'bundle' => $target,
              'cardinality' => $field_info['cardinality'],
              'required' => $instance_info['required'],
              'fieldname' => $field_name,
            );
          }
        }
      }
    }
  }
}

/**
 * Get entity name by table.
 */
function entitiesdiagram_entitygraph_get_entity_by_table($table) {
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if (!empty($entity_info['base table']) && $entity_info['base table'] == $table) {
      return $entity_type;
    }
  }
}

/**
 * Create an Edge connection.
 *
 * @param $graph
 *  Graph array to update.
 */
function entitiesdiagram_entitygraph_relationship(&$graph, $source, $target, $required, $cardinality, $fieldname) {
  $edge_info = array(
    'arrowhead' => 'normal',
  );
  if ($cardinality >= 1) {
    $min_cardinality = $required ? $cardinality : 0;
    $max_cardinality = $cardinality;
  }
  else {
    $min_cardinality = $required ? 1 : 0;
    $max_cardinality = '*';
  }
  $edge_info['taillabel'] = $min_cardinality . '..' . $max_cardinality;

  $edge_info['headlabel'] = '1..*';
  $edge_info['fieldname'] = $fieldname;

  $graph['edges'][$source][$target] = $edge_info;
}

/**
 * Render graph into digraph format.
 * using https://en.wikipedia.org/wiki/DOT_(graph_description_language)
 */
function entitiesdiagram_entitygraph_generate($graph) {
  // Merge in defaults.
  $graph += array(
    'nodes' => array(),
    'edges' => array(),
  );
  $output = "digraph G {\n";

  $output .= "node [\n";
  $output .= "shape = \"record\"\n";
  $output .= "]\n";

  foreach ($graph['nodes'] as $name => $node_info) {
    if (!empty($node_info['group'])) {
      $output .= entitiesdiagram_entitygraph_generate_subgraph($name, $node_info);
    }
    else {
      $output .= entitiesdiagram_entitygraph_generate_node($name, $node_info);
    }
  }

  foreach ($graph['edges'] as $source_node => $edges) {
    foreach ($edges as $target_node => $edge_info) {
      $output .= "edge [\n";
      foreach ($edge_info as $k => $v) {
        $output .= ' "' . check_plain($k) . '" = "'. check_plain($v) . '"' . "\n";
      }
      $output .= "]\n";
      $color = entitiesdiagram_random_color();
      $output .= format_string('@source_node -> @target_node [color="@color"][label="(@fieldname)" fontcolor="@color"]',
        array(
          '@source_node' => $source_node,
          '@target_node' => $target_node,
          '@color' => $color,
          '@fieldname' => $edge_info['fieldname'],
        )
      );
    }
  }

  $output .= "\n}\n";
  return $output;
}

/**
 * Create random RGB element.
 */
function entitiesdiagram_random_color_part() {
  return str_pad( dechex( mt_rand( 0, 255 ) ), 2, '0', STR_PAD_LEFT);
}

/**
 * Create random RGB color.
 */
function entitiesdiagram_random_color() {
  return '#' . entitiesdiagram_random_color_part() . entitiesdiagram_random_color_part() . entitiesdiagram_random_color_part();
}

/**
 * Create a subgraph
 */
function entitiesdiagram_entitygraph_generate_subgraph($name, $subgraph_info) {
  $label = $subgraph_info['label'];
  unset($subgraph_info['label']);
  unset($subgraph_info['group']);

  $output = "subgraph $name {\n";
  $output .= 'label = "' . check_plain($label) . '"' . "\n";

  foreach ($subgraph_info as $node_name => $node_info) {
    $output .= entitiesdiagram_entitygraph_generate_node($node_name, $node_info);
  }

  $output .= "}\n";
  return $output;
}

/**
 * Create a single node box.
 */
function entitiesdiagram_entitygraph_generate_node($name, $node_info) {
  // Merge in defaults.
  $node_info += array(
    'title' => $name,
    'properties' => array(),
    'fields' => array(),
    'methods' => array(),
  );

  $label  = $node_info['title'] . '|';

  foreach ($node_info['properties'] as $property_name => $property_info) {
    $property_info += array(
      'type' => '',
    );
    $label .= $property_name . ' : ' . $property_info['type'] . '\l';
  }

  $label .= '|';

  foreach ($node_info['fields'] as $field_name => $field_info) {
    $field_info += array(
      'type' => '',
    );
    $label .= $field_name . ' : ' . $field_info['type'] . '|';
  }

  return $name . ' [ label = "{' . check_plain($label) . '}" ]';
}
